# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import rostopic_hz_pb2 as rostopic__hz__pb2


class RostopicHzRpcStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.joinClient = channel.unary_stream(
                '/RostopicHzRpc/joinClient',
                request_serializer=rostopic__hz__pb2.Empty.SerializeToString,
                response_deserializer=rostopic__hz__pb2.RostopicHzResponse.FromString,
                )
        self.addTopics = channel.unary_unary(
                '/RostopicHzRpc/addTopics',
                request_serializer=rostopic__hz__pb2.Topics.SerializeToString,
                response_deserializer=rostopic__hz__pb2.Successes.FromString,
                )
        self.removeTopics = channel.unary_unary(
                '/RostopicHzRpc/removeTopics',
                request_serializer=rostopic__hz__pb2.Topics.SerializeToString,
                response_deserializer=rostopic__hz__pb2.Empty.FromString,
                )
        self.stopMonitor = channel.unary_unary(
                '/RostopicHzRpc/stopMonitor',
                request_serializer=rostopic__hz__pb2.Empty.SerializeToString,
                response_deserializer=rostopic__hz__pb2.Empty.FromString,
                )


class RostopicHzRpcServicer(object):
    """Missing associated documentation comment in .proto file."""

    def joinClient(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addTopics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def removeTopics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopMonitor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RostopicHzRpcServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'joinClient': grpc.unary_stream_rpc_method_handler(
                    servicer.joinClient,
                    request_deserializer=rostopic__hz__pb2.Empty.FromString,
                    response_serializer=rostopic__hz__pb2.RostopicHzResponse.SerializeToString,
            ),
            'addTopics': grpc.unary_unary_rpc_method_handler(
                    servicer.addTopics,
                    request_deserializer=rostopic__hz__pb2.Topics.FromString,
                    response_serializer=rostopic__hz__pb2.Successes.SerializeToString,
            ),
            'removeTopics': grpc.unary_unary_rpc_method_handler(
                    servicer.removeTopics,
                    request_deserializer=rostopic__hz__pb2.Topics.FromString,
                    response_serializer=rostopic__hz__pb2.Empty.SerializeToString,
            ),
            'stopMonitor': grpc.unary_unary_rpc_method_handler(
                    servicer.stopMonitor,
                    request_deserializer=rostopic__hz__pb2.Empty.FromString,
                    response_serializer=rostopic__hz__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'RostopicHzRpc', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RostopicHzRpc(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def joinClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/RostopicHzRpc/joinClient',
            rostopic__hz__pb2.Empty.SerializeToString,
            rostopic__hz__pb2.RostopicHzResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addTopics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RostopicHzRpc/addTopics',
            rostopic__hz__pb2.Topics.SerializeToString,
            rostopic__hz__pb2.Successes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def removeTopics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RostopicHzRpc/removeTopics',
            rostopic__hz__pb2.Topics.SerializeToString,
            rostopic__hz__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopMonitor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RostopicHzRpc/stopMonitor',
            rostopic__hz__pb2.Empty.SerializeToString,
            rostopic__hz__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
